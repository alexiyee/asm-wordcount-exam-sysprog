     1                                  ;-----------------------------------------------------------------------------
     2                                  ; uint_to_ascii64.asm
     3                                  ;-----------------------------------------------------------------------------
     4                                  ;
     5                                  ; DHBW Ravensburg - Campus Friedrichshafen
     6                                  ;
     7                                  ; Vorlesung Systemnahe Programmierung (SNP)
     8                                  ;
     9                                  ;----------------------------------------------------------------------------
    10                                  ;
    11                                  ; Architecture:  x86-64
    12                                  ; Language:      NASM Assembly Language
    13                                  ;
    14                                  ; Author:        Ralf Reutemann
    15                                  ; Created:       2021-12-02
    16                                  ;
    17                                  ;----------------------------------------------------------------------------
    18                                  
    19                                  
    20                                  ;-----------------------------------------------------------------------------
    21                                  ; Section TEXT
    22                                  ;-----------------------------------------------------------------------------
    23                                  SECTION .text
    24                                  
    25                                          global uint_to_ascii:function
    26                                  
    27                                  uint_to_ascii:
    28                                          ; rdi: char *s
    29                                          ; rsi: uint64_t x
    30 00000000 51                              push  rcx
    31 00000001 53                              push  rbx
    32                                  
    33 00000002 B90A000000                      mov   ecx,10   ; loop counter
    34 00000007 4885F6                          test  rsi,rsi
    35 0000000A 7507                            jnz   .loop_start
    36 0000000C C6440FFF30                      mov   byte [rdi+rcx-1],'0'
    37 00000011 EB1F                            jmp   .func_end
    38                                  
    39                                  .loop_start:
    40 00000013 BB0A000000                      mov   ebx,10   ; divisor
    41 00000018 4889F0                          mov   rax,rsi  ; ticks
    42                                  .loop:
    43 0000001B 4885C0                          test  rax,rax
    44 0000001E 7412                            jz    .func_end
    45 00000020 4831D2                          xor   rdx,rdx
    46 00000023 48F7F3                          div   rbx
    47 00000026 80C230                          add   dl,'0'
    48 00000029 88540FFF                        mov   [rdi+rcx-1],dl
    49 0000002D 48FFC9                          dec   rcx
    50 00000030 75E9                            jnz   .loop
    51                                  
    52                                  .func_end:
    53 00000032 5B                              pop   rbx
    54 00000033 59                              pop   rcx
    55 00000034 C3                              ret
